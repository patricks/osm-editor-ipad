<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/GRMustacheTemplate.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/GRMustacheTemplate</TokenIdentifier>
			<Abstract type="html">The GRMustacheTemplate class provides with Mustache template rendering
services.</Abstract>
			<DeclaredIn>GRMustacheTemplate.h</DeclaredIn>
			
			<NodeRef refid="10"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GRMustacheTemplate/setAVAILABLE_GRMUSTACHE_VERSION_5_0_AND_LATER:</TokenIdentifier>
			<Abstract type="html">The template&apos;s delegate.</Abstract>
			<DeclaredIn>GRMustacheTemplate.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/intf/GRMustacheTemplateDelegate</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>@property (nonatomic, assign) id&lt;GRMustacheTemplateDelegate&gt; delegate AVAILABLE_GRMUSTACHE_VERSION_5_0_AND_LATER</Declaration>
			
			
			<Anchor>//api/name/AVAILABLE_GRMUSTACHE_VERSION_5_0_AND_LATER</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/GRMustacheTemplate/AVAILABLE_GRMUSTACHE_VERSION_5_0_AND_LATER</TokenIdentifier>
			<Abstract type="html">The template&apos;s delegate.</Abstract>
			<DeclaredIn>GRMustacheTemplate.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/intf/GRMustacheTemplateDelegate</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>@property (nonatomic, assign) id&lt;GRMustacheTemplateDelegate&gt; delegate AVAILABLE_GRMUSTACHE_VERSION_5_0_AND_LATER</Declaration>
			
			
			<Anchor>//api/name/AVAILABLE_GRMUSTACHE_VERSION_5_0_AND_LATER</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/GRMustacheTemplate/templateFromString:error:</TokenIdentifier>
			<Abstract type="html">Parses a template string, and returns a compiled template.</Abstract>
			<DeclaredIn>GRMustacheTemplate.h</DeclaredIn>			
			
			<Declaration>+ (id)templateFromString:(NSString *)templateString error:(NSError **)outError</Declaration>
			<Parameters>
				<Parameter>
					<Name>templateString</Name>
					<Abstract type="html">The template string.</Abstract>
				</Parameter><Parameter>
					<Name>outError</Name>
					<Abstract type="html">If there is an error loading or parsing template and
partials, upon return contains an NSError object that
describes the problem.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A GRMustacheTemplate instance.</Abstract></ReturnValue>
			<Anchor>//api/name/templateFromString:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/GRMustacheTemplate/renderObject:fromString:error:</TokenIdentifier>
			<Abstract type="html">Renders an object from a template string.</Abstract>
			<DeclaredIn>GRMustacheTemplate.h</DeclaredIn>			
			
			<Declaration>+ (NSString *)renderObject:(id)object fromString:(NSString *)templateString error:(NSError **)outError</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">An object used for interpreting Mustache tags.</Abstract>
				</Parameter><Parameter>
					<Name>templateString</Name>
					<Abstract type="html">The template string.</Abstract>
				</Parameter><Parameter>
					<Name>outError</Name>
					<Abstract type="html">If there is an error loading or parsing template and
partials, upon return contains an NSError object that
describes the problem.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A string containing the rendered template.</Abstract></ReturnValue>
			<Anchor>//api/name/renderObject:fromString:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/GRMustacheTemplate/renderObject:withFilters:fromString:error:</TokenIdentifier>
			<Abstract type="html">Renders an object from a template string.</Abstract>
			<DeclaredIn>GRMustacheTemplate.h</DeclaredIn>			
			
			<Declaration>+ (NSString *)renderObject:(id)object withFilters:(id)filters fromString:(NSString *)templateString error:(NSError **)outError</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">An object used for interpreting Mustache tags.</Abstract>
				</Parameter><Parameter>
					<Name>filters</Name>
					<Abstract type="html">An object that provides custom filters.</Abstract>
				</Parameter><Parameter>
					<Name>templateString</Name>
					<Abstract type="html">The template string.</Abstract>
				</Parameter><Parameter>
					<Name>outError</Name>
					<Abstract type="html">If there is an error loading or parsing template and
partials, upon return contains an NSError object that
describes the problem.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A string containing the rendered template.</Abstract></ReturnValue>
			<Anchor>//api/name/renderObject:withFilters:fromString:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/GRMustacheTemplate/templateFromContentsOfFile:error:</TokenIdentifier>
			<Abstract type="html">Parses a template file, and returns a compiled template.</Abstract>
			<DeclaredIn>GRMustacheTemplate.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/GRMustacheTemplateRepository</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>+ (id)templateFromContentsOfFile:(NSString *)path error:(NSError **)outError</Declaration>
			<Parameters>
				<Parameter>
					<Name>path</Name>
					<Abstract type="html">The path of the template.</Abstract>
				</Parameter><Parameter>
					<Name>outError</Name>
					<Abstract type="html">If there is an error loading or parsing template and
partials, upon return contains an NSError object that
describes the problem.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A GRMustacheTemplate instance.</Abstract></ReturnValue>
			<Anchor>//api/name/templateFromContentsOfFile:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/GRMustacheTemplate/templateFromContentsOfURL:error:</TokenIdentifier>
			<Abstract type="html">Parses a template file, and returns a compiled template.</Abstract>
			<DeclaredIn>GRMustacheTemplate.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/GRMustacheTemplateRepository</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>+ (id)templateFromContentsOfURL:(NSURL *)url error:(NSError **)outError</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">The URL of the template.</Abstract>
				</Parameter><Parameter>
					<Name>outError</Name>
					<Abstract type="html">If there is an error loading or parsing template and
partials, upon return contains an NSError object that
describes the problem.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A GRMustacheTemplate instance.</Abstract></ReturnValue>
			<Anchor>//api/name/templateFromContentsOfURL:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/GRMustacheTemplate/renderObject:fromContentsOfFile:error:</TokenIdentifier>
			<Abstract type="html">Renders an object from a file template.</Abstract>
			<DeclaredIn>GRMustacheTemplate.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/GRMustacheTemplateRepository</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>+ (NSString *)renderObject:(id)object fromContentsOfFile:(NSString *)path error:(NSError **)outError</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">An object used for interpreting Mustache tags.</Abstract>
				</Parameter><Parameter>
					<Name>path</Name>
					<Abstract type="html">The path of the template.</Abstract>
				</Parameter><Parameter>
					<Name>outError</Name>
					<Abstract type="html">If there is an error loading or parsing template and
partials, upon return contains an NSError object that
describes the problem.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A string containing the rendered template.</Abstract></ReturnValue>
			<Anchor>//api/name/renderObject:fromContentsOfFile:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/GRMustacheTemplate/renderObject:withFilters:fromContentsOfFile:error:</TokenIdentifier>
			<Abstract type="html">Renders an object from a file template.</Abstract>
			<DeclaredIn>GRMustacheTemplate.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/GRMustacheTemplateRepository</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>+ (NSString *)renderObject:(id)object withFilters:(id)filters fromContentsOfFile:(NSString *)path error:(NSError **)outError</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">An object used for interpreting Mustache tags.</Abstract>
				</Parameter><Parameter>
					<Name>filters</Name>
					<Abstract type="html">An object that provides custom filters.</Abstract>
				</Parameter><Parameter>
					<Name>path</Name>
					<Abstract type="html">The path of the template.</Abstract>
				</Parameter><Parameter>
					<Name>outError</Name>
					<Abstract type="html">If there is an error loading or parsing template and
partials, upon return contains an NSError object that
describes the problem.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A string containing the rendered template.</Abstract></ReturnValue>
			<Anchor>//api/name/renderObject:withFilters:fromContentsOfFile:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/GRMustacheTemplate/renderObject:fromContentsOfURL:error:</TokenIdentifier>
			<Abstract type="html">Renders an object from a file template.</Abstract>
			<DeclaredIn>GRMustacheTemplate.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/GRMustacheTemplateRepository</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>+ (NSString *)renderObject:(id)object fromContentsOfURL:(NSURL *)url error:(NSError **)outError</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">An object used for interpreting Mustache tags.</Abstract>
				</Parameter><Parameter>
					<Name>url</Name>
					<Abstract type="html">The URL of the template.</Abstract>
				</Parameter><Parameter>
					<Name>outError</Name>
					<Abstract type="html">If there is an error loading or parsing template and
partials, upon return contains an NSError object that
describes the problem.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A string containing the rendered template.</Abstract></ReturnValue>
			<Anchor>//api/name/renderObject:fromContentsOfURL:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/GRMustacheTemplate/renderObject:withFilters:fromContentsOfURL:error:</TokenIdentifier>
			<Abstract type="html">Renders an object from a file template.</Abstract>
			<DeclaredIn>GRMustacheTemplate.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/GRMustacheTemplateRepository</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>+ (NSString *)renderObject:(id)object withFilters:(id)filters fromContentsOfURL:(NSURL *)url error:(NSError **)outError</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">An object used for interpreting Mustache tags.</Abstract>
				</Parameter><Parameter>
					<Name>filters</Name>
					<Abstract type="html">An object that provides custom filters.</Abstract>
				</Parameter><Parameter>
					<Name>url</Name>
					<Abstract type="html">The URL of the template.</Abstract>
				</Parameter><Parameter>
					<Name>outError</Name>
					<Abstract type="html">If there is an error loading or parsing template and
partials, upon return contains an NSError object that
describes the problem.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A string containing the rendered template.</Abstract></ReturnValue>
			<Anchor>//api/name/renderObject:withFilters:fromContentsOfURL:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/GRMustacheTemplate/templateFromResource:bundle:error:</TokenIdentifier>
			<Abstract type="html">Parses a bundle resource template, and returns a compiled template.</Abstract>
			<DeclaredIn>GRMustacheTemplate.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/GRMustacheTemplateRepository</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>+ (id)templateFromResource:(NSString *)name bundle:(NSBundle *)bundle error:(NSError **)outError</Declaration>
			<Parameters>
				<Parameter>
					<Name>name</Name>
					<Abstract type="html">The name of a bundle resource of extension &quot;mustache&quot;.</Abstract>
				</Parameter><Parameter>
					<Name>bundle</Name>
					<Abstract type="html">The bundle where to look for the template resource.</Abstract>
				</Parameter><Parameter>
					<Name>outError</Name>
					<Abstract type="html">If there is an error loading or parsing template and
partials, upon return contains an NSError object that
describes the problem.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A GRMustacheTemplate instance.</Abstract></ReturnValue>
			<Anchor>//api/name/templateFromResource:bundle:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/GRMustacheTemplate/templateFromResource:withExtension:bundle:error:</TokenIdentifier>
			<Abstract type="html">Parses a bundle resource template, and returns a compiled template.</Abstract>
			<DeclaredIn>GRMustacheTemplate.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/GRMustacheTemplateRepository</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>+ (id)templateFromResource:(NSString *)name withExtension:(NSString *)ext bundle:(NSBundle *)bundle error:(NSError **)outError</Declaration>
			<Parameters>
				<Parameter>
					<Name>name</Name>
					<Abstract type="html">The name of a bundle resource.</Abstract>
				</Parameter><Parameter>
					<Name>ext</Name>
					<Abstract type="html">The extension of the bundle resource.</Abstract>
				</Parameter><Parameter>
					<Name>bundle</Name>
					<Abstract type="html">The bundle where to look for the template resource.</Abstract>
				</Parameter><Parameter>
					<Name>outError</Name>
					<Abstract type="html">If there is an error loading or parsing template and
partials, upon return contains an NSError object that
describes the problem.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A GRMustacheTemplate instance.</Abstract></ReturnValue>
			<Anchor>//api/name/templateFromResource:withExtension:bundle:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/GRMustacheTemplate/renderObject:fromResource:bundle:error:</TokenIdentifier>
			<Abstract type="html">Renders an object from a bundle resource template.</Abstract>
			<DeclaredIn>GRMustacheTemplate.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/GRMustacheTemplateRepository</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>+ (NSString *)renderObject:(id)object fromResource:(NSString *)name bundle:(NSBundle *)bundle error:(NSError **)outError</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">An object used for interpreting Mustache tags.</Abstract>
				</Parameter><Parameter>
					<Name>name</Name>
					<Abstract type="html">The name of a bundle resource of extension &quot;mustache&quot;.</Abstract>
				</Parameter><Parameter>
					<Name>bundle</Name>
					<Abstract type="html">The bundle where to look for the template resource.</Abstract>
				</Parameter><Parameter>
					<Name>outError</Name>
					<Abstract type="html">If there is an error loading or parsing template and
partials, upon return contains an NSError object that
describes the problem.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A string containing the rendered template.</Abstract></ReturnValue>
			<Anchor>//api/name/renderObject:fromResource:bundle:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/GRMustacheTemplate/renderObject:withFilters:fromResource:bundle:error:</TokenIdentifier>
			<Abstract type="html">Renders an object from a bundle resource template.</Abstract>
			<DeclaredIn>GRMustacheTemplate.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/GRMustacheTemplateRepository</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>+ (NSString *)renderObject:(id)object withFilters:(id)filters fromResource:(NSString *)name bundle:(NSBundle *)bundle error:(NSError **)outError</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">An object used for interpreting Mustache tags.</Abstract>
				</Parameter><Parameter>
					<Name>filters</Name>
					<Abstract type="html">An object that provides custom filters.</Abstract>
				</Parameter><Parameter>
					<Name>name</Name>
					<Abstract type="html">The name of a bundle resource of extension &quot;mustache&quot;.</Abstract>
				</Parameter><Parameter>
					<Name>bundle</Name>
					<Abstract type="html">The bundle where to look for the template resource</Abstract>
				</Parameter><Parameter>
					<Name>outError</Name>
					<Abstract type="html">If there is an error loading or parsing template and
partials, upon return contains an NSError object that
describes the problem.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A string containing the rendered template.</Abstract></ReturnValue>
			<Anchor>//api/name/renderObject:withFilters:fromResource:bundle:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/GRMustacheTemplate/renderObject:fromResource:withExtension:bundle:error:</TokenIdentifier>
			<Abstract type="html">Renders an object from a bundle resource template.</Abstract>
			<DeclaredIn>GRMustacheTemplate.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/GRMustacheTemplateRepository</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>+ (NSString *)renderObject:(id)object fromResource:(NSString *)name withExtension:(NSString *)ext bundle:(NSBundle *)bundle error:(NSError **)outError</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">An object used for interpreting Mustache tags.</Abstract>
				</Parameter><Parameter>
					<Name>name</Name>
					<Abstract type="html">The name of a bundle resource.</Abstract>
				</Parameter><Parameter>
					<Name>ext</Name>
					<Abstract type="html">The extension of the bundle resource.</Abstract>
				</Parameter><Parameter>
					<Name>bundle</Name>
					<Abstract type="html">The bundle where to look for the template resource.</Abstract>
				</Parameter><Parameter>
					<Name>outError</Name>
					<Abstract type="html">If there is an error loading or parsing template and
partials, upon return contains an NSError object that
describes the problem.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A string containing the rendered template.</Abstract></ReturnValue>
			<Anchor>//api/name/renderObject:fromResource:withExtension:bundle:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/GRMustacheTemplate/renderObject:withFilters:fromResource:withExtension:bundle:error:</TokenIdentifier>
			<Abstract type="html">Renders an object from a bundle resource template.</Abstract>
			<DeclaredIn>GRMustacheTemplate.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/GRMustacheTemplateRepository</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>+ (NSString *)renderObject:(id)object withFilters:(id)filters fromResource:(NSString *)name withExtension:(NSString *)ext bundle:(NSBundle *)bundle error:(NSError **)outError</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">An object used for interpreting Mustache tags.</Abstract>
				</Parameter><Parameter>
					<Name>filters</Name>
					<Abstract type="html">An object that provides custom filters.</Abstract>
				</Parameter><Parameter>
					<Name>name</Name>
					<Abstract type="html">The name of a bundle resource.</Abstract>
				</Parameter><Parameter>
					<Name>ext</Name>
					<Abstract type="html">The extension of the bundle resource.</Abstract>
				</Parameter><Parameter>
					<Name>bundle</Name>
					<Abstract type="html">The bundle where to look for the template resource.</Abstract>
				</Parameter><Parameter>
					<Name>outError</Name>
					<Abstract type="html">If there is an error loading or parsing template and
partials, upon return contains an NSError object that
describes the problem.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A string containing the rendered template.</Abstract></ReturnValue>
			<Anchor>//api/name/renderObject:withFilters:fromResource:withExtension:bundle:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GRMustacheTemplate/renderObject:</TokenIdentifier>
			<Abstract type="html">Renders a template with a context stack initialized with a single object.</Abstract>
			<DeclaredIn>GRMustacheTemplate.h</DeclaredIn>			
			
			<Declaration>- (NSString *)renderObject:(id)object</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">An object used for interpreting Mustache tags.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A string containing the rendered template.</Abstract></ReturnValue>
			<Anchor>//api/name/renderObject:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GRMustacheTemplate/renderObject:withFilters:</TokenIdentifier>
			<Abstract type="html">Renders a template with a context stack initialized with a single object.</Abstract>
			<DeclaredIn>GRMustacheTemplate.h</DeclaredIn>			
			
			<Declaration>- (NSString *)renderObject:(id)object withFilters:(id)filters</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">An object used for interpreting Mustache tags.</Abstract>
				</Parameter><Parameter>
					<Name>filters</Name>
					<Abstract type="html">An object that provides custom filters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A string containing the rendered template.</Abstract></ReturnValue>
			<Anchor>//api/name/renderObject:withFilters:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GRMustacheTemplate/renderObjectsInArray:</TokenIdentifier>
			<Abstract type="html">Deprecated method: Use renderObjectsFromArray: instead.</Abstract>
			<DeclaredIn>GRMustacheTemplate.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/GRMustacheTemplate/renderObjectsFromArray:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (NSString *)renderObjectsInArray:(NSArray *)objects</Declaration>
			<Parameters>
				<Parameter>
					<Name>objects</Name>
					<Abstract type="html">An array of context objects for interpreting Mustache tags.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A string containing the rendered template.</Abstract></ReturnValue>
			<Anchor>//api/name/renderObjectsInArray:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GRMustacheTemplate/renderObjectsFromArray:</TokenIdentifier>
			<Abstract type="html">Renders a template with a context stack initialized with an array of objects.</Abstract>
			<DeclaredIn>GRMustacheTemplate.h</DeclaredIn>			
			
			<Declaration>- (NSString *)renderObjectsFromArray:(NSArray *)objects</Declaration>
			<Parameters>
				<Parameter>
					<Name>objects</Name>
					<Abstract type="html">An array of context objects for interpreting Mustache tags.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A string containing the rendered template.</Abstract></ReturnValue>
			<Anchor>//api/name/renderObjectsFromArray:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GRMustacheTemplate/renderObjectsInArray:withFilters:</TokenIdentifier>
			<Abstract type="html">Deprecated method: Use renderObjectsFromArray:withFilters: instead.</Abstract>
			<DeclaredIn>GRMustacheTemplate.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/GRMustacheTemplate/renderObjectsFromArray:withFilters:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (NSString *)renderObjectsInArray:(NSArray *)objects withFilters:(id)filters</Declaration>
			<Parameters>
				<Parameter>
					<Name>objects</Name>
					<Abstract type="html">An array of context objects for interpreting Mustache tags.</Abstract>
				</Parameter><Parameter>
					<Name>filters</Name>
					<Abstract type="html">An object that provides custom filters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A string containing the rendered template.</Abstract></ReturnValue>
			<Anchor>//api/name/renderObjectsInArray:withFilters:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GRMustacheTemplate/renderObjectsFromArray:withFilters:</TokenIdentifier>
			<Abstract type="html">Renders a template with a context stack initialized with an array of objects.</Abstract>
			<DeclaredIn>GRMustacheTemplate.h</DeclaredIn>			
			
			<Declaration>- (NSString *)renderObjectsFromArray:(NSArray *)objects withFilters:(id)filters</Declaration>
			<Parameters>
				<Parameter>
					<Name>objects</Name>
					<Abstract type="html">An array of context objects for interpreting Mustache tags.</Abstract>
				</Parameter><Parameter>
					<Name>filters</Name>
					<Abstract type="html">An object that provides custom filters.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A string containing the rendered template.</Abstract></ReturnValue>
			<Anchor>//api/name/renderObjectsFromArray:withFilters:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GRMustacheTemplate/render</TokenIdentifier>
			<Abstract type="html">Renders a template without any context object for interpreting Mustache tags.</Abstract>
			<DeclaredIn>GRMustacheTemplate.h</DeclaredIn>			
			
			<Declaration>- (NSString *)render</Declaration>
			
			<ReturnValue><Abstract type="html">A string containing the rendered template.</Abstract></ReturnValue>
			<Anchor>//api/name/render</Anchor>
		</Token>
		
	</File>
</Tokens>